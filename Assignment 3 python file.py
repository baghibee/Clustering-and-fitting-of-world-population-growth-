# -*- coding: utf-8 -*-
"""Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U2r1ywbIR1TKP8NNOToZePbq9dJkj7_o

# Clustering
"""

import pandas as pd
import numpy as np

df = pd.read_excel('API_SP.POP.GROW_DS2_en_excel_v2_4770572.xls')
df = df.iloc[3:]

df

#Renaming Unnamed Columns as years from 1961 to 2021
# create a list of old column names
old_cols = [f'Unnamed: {i}' for i in range(5,65)]
# create a list of new column names
new_cols = [str(i) for i in range(1961,2021)]
# create a dictionary to map old column names to new column names
col_map = dict(zip(old_cols, new_cols))
# use the rename function to map old column names to new column names
df = df.rename(columns=col_map)
df = df.rename(columns={'Unnamed: 65':'2021'})

df.head()

# count of countries
df['Data Source'].count().sum()

df.isnull().sum()

#sum values of features all years population growth while ignoring null values
df['total'] = df.iloc[:, 3:].sum(axis=1, skipna=True)

df.head()

from sklearn import preprocessing
# label_encoder object knows how to understand word labels.
label_encoder = preprocessing.LabelEncoder()
label = df
# Encode labels in column 'Countries'.
label['Data Source']= label_encoder.fit_transform(label['Data Source'])
X = label[['total','Data Source']]    #.values.reshape(-1,1)
X

from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
plt.rcParams["figure.figsize"] = (10,5)

# Create an empty list to store WCSS values
wcss = []

# Fit KMeans and calculate WCSS for k in the range 1 to 15
for k in range(1, 15):
    kmeans = KMeans(n_clusters=k, init='k-means++', max_iter=300, n_init=10, random_state=0)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)

# Plot WCSS values for each k
plt.plot(range(1, 15), wcss)
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

# Use the optimal number of clusters from elbow method
optimal_k = 4
kmeans = KMeans(n_clusters=optimal_k, init='k-means++', max_iter=300, n_init=10, random_state=0)

identified_clusters = kmeans.fit_predict(X)
identified_clusters

import seaborn as sns

legend_labels = ["Cluster 0:66 Countries", "Cluster 1:82 Countries", "Cluster 2:63 Countries", "Cluster 3:55 Countries"]

sns.scatterplot(data=df, x="total", y="Data Source", hue=kmeans.labels_, palette='rainbow', style=kmeans.labels_, markers=["o", "s", "D", "X"])

plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], cmap='RdYlBu', c="black", 
            marker="X", s=80, label="centroids")
plt.legend(title='Clusters', labels=legend_labels)
plt.title('Clusters of Countries WRT Thier Population Growth (1961-2021)')
plt.xlabel('Popluation Growth in Percentage')
plt.ylabel('Encoded Names of Countries')
plt.show()

df.head()

df['clusters'] = identified_clusters
df['Data Source'] = label_encoder.inverse_transform(df['Data Source'])
cluster_summary= pd.concat([df[df["clusters"]==1].head(),df[df["clusters"]==2].head(15),df[df["clusters"]==0].head(15),df[df["clusters"]==3].head(15)])
cluster_summary

"""# Comparing between Cluster Countries"""

print("Number of Countries in Cluster 0: ",len(list(df[df["clusters"]==0]['Data Source'])))
print("Countries belonging to Cluster 0: ",list(df[df["clusters"]==0]['Data Source']))
print("Number of Countries in Cluster 1: ",len(list(df[df["clusters"]==1]['Data Source'])))
print("Countries belonging to Cluster 1: ",list(df[df["clusters"]==1]['Data Source']))
print("Number of Countries in Cluster 2: ",len(list(df[df["clusters"]==2]['Data Source'])))
print("Countries belonging to Cluster 2: ",list(df[df["clusters"]==2]['Data Source']))
print("Number of Countries in Cluster 3: ",len(list(df[df["clusters"]==3]['Data Source'])))
print("Countries belonging to Cluster 3: ",list(df[df["clusters"]==3]['Data Source']))

#Time series predictions require the years to be rows, Therfore, here I transposed columns to rows and eliminated irrelevant columns
df = df.set_index('Data Source')
df_transposed = df.T
df_transposed = df_transposed.drop(['World Development Indicators','Unnamed: 2','Unnamed: 3','Unnamed: 4','clusters','total'], axis='rows')
df_transposed

import matplotlib.ticker as plticker

# Create a figure with 2 rows and 2 columns of subplots
fig, axs = plt.subplots(2, 2, figsize=(20, 10))

df_transposed.index = df_transposed.index.astype(int)

# Create a line plot for the first subplot
axs[0, 0].plot(df_transposed['Argentina'])
axs[0, 0].set_xlabel('Year')
axs[0, 0].set_ylabel('Growth Percentage')
axs[0, 0].set_xticks(np.arange(df_transposed.index[0], df_transposed.index[-1], 4))
axs[0, 0].set_title('Growth Percentage of Cluster 1 Country (Argentina)')

# Create a line plot for the second subplot
axs[0, 1].plot(df_transposed['United Arab Emirates'], color ='orange')
axs[0, 1].set_xlabel('Year')
axs[0, 1].set_ylabel('Growth Percentage')
axs[0, 1].set_xticks(np.arange(df_transposed.index[0], df_transposed.index[-1], 4))
axs[0, 1].set_title('Growth Percentage of Cluster 2 Country (United Arab Emirates)')

# Create a line plot for the third subplot
axs[1, 0].plot(df_transposed['Afghanistan'], color ='black')
axs[1, 0].set_xlabel('Year')
axs[1, 0].set_ylabel('Growth Percentage')
axs[1, 0].set_xticks(np.arange(df_transposed.index[0], df_transposed.index[-1], 4))
axs[1, 0].set_title('Growth Percentage of Cluster 3 Country (Afghanistan)')

# Create a line plot for the fourth subplot
axs[1, 1].plot(df_transposed['Switzerland'], color ='red')
axs[1, 1].set_xlabel('Year')
axs[1, 1].set_ylabel('Growth Percentage')
axs[1, 1].set_xticks(np.arange(df_transposed.index[0], df_transposed.index[-1], 4))
axs[1, 1].set_title('Growth Percentage of Cluster 4 Country (Switzerland)')

# Add space between subplots
plt.subplots_adjust(hspace=0.4)
plt.show()

fig, axs = plt.subplots(1, 2, figsize=(20, 8))

# Create a line plot for the first subplot
axs[0].plot(df_transposed['United States'])
axs[0].set_xlabel('Year')
axs[0].set_ylabel('Growth Percentage')
axs[0].set_xticks(np.arange(df_transposed.index[0], df_transposed.index[-1], 4))
axs[0].set_title('Growth Percentage of USA')

# Create a line plot for the second subplot
axs[1].plot(df_transposed['United Kingdom'], color ='orange')
axs[1].set_xlabel('Year')
axs[1].set_ylabel('Growth Percentage')
axs[1].set_xticks(np.arange(df_transposed.index[0], df_transposed.index[-1], 4))
axs[1].set_title('Growth Percentage of UK')

plt.show()

"""# Time Series Prediction"""

from scipy.optimize import curve_fit

x_data = range(len(df_transposed.index))
y_data = df_transposed['United Kingdom']

def log_curve(x, k, x_0, ymax):
    return ymax / (1 + np.exp(-k*(x-x_0)))
    

# Fit the curve
popt, pcov = curve_fit(log_curve, x_data, y_data, bounds=([0,0,0],np.inf), maxfev=1000)

estimated_k, estimated_x_0, ymax = popt

# Plot the fitted curve
k = estimated_k
x_0 = estimated_x_0
y_fitted = log_curve(x_data, k, x_0, ymax)
print(k, x_0, ymax)

# Plot everything for illustration
fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot(x_data, y_fitted, 'r--')
ax.plot(x_data, y_data, 'o')
plt.xlabel('Year')
plt.title('Fitted Model with Real Data')
plt.ylabel('Percentage Growth')
plt.show()

# Use the model to make predictions for the next 20 years
x_future = np.array(range(2022, 2042))
y_future = log_curve(x_future, *popt)
print(y_future)

from scipy.stats import norm

# Fit the curve
popt, pcov = curve_fit(log_curve, x_data, y_data, bounds=([0,0,0],np.inf), maxfev=1000)

estimated_k, estimated_x_0, ymax = popt

# Calculate the standard deviation of the estimates
sigma = np.sqrt(np.diag(pcov))

# Calculate the lower and upper bounds of the confidence interval
alpha = 0.05 # Confidence level
n = len(x_data)
p = len(popt)
dof = max(0, n - p) # Degrees of freedom
tval = norm.ppf(1.0 - alpha / 2.0, dof)
err_range = tval * sigma

# Plot the fitted curve
k = estimated_k
x_0 = estimated_x_0
y_fitted = log_curve(x_data, k, x_0, ymax)

# Plot the data and the fitted curve
plt.plot(x_data, y_data, 'o', label='data')
plt.plot(x_data, y_fitted, '-', label='fit')

# Plot the error ranges
plt.fill_between(x_data, log_curve(x_data, k-err_range[0], x_0-err_range[1], ymax-err_range[2]), log_curve(x_data, k+err_range[0], x_0+err_range[1], ymax+err_range[2]), color='gray', alpha=0.5)

# Add labels and legend
plt.xlabel('Subsequent Years')
plt.ylabel('Expected Growth in Percentage')
plt.title('Predicted Population Growth Percentage of the UK')
plt.legend()

# Show the plot
plt.show()

